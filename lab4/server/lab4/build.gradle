/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'application'
    // id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

}


repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation 'com.h2database:h2:2.1.214'
}
group = 'se.ifmo.lab4'
version = '0.0.1-SNAPSHOT'
description = 'lab4'
sourceCompatibility = 17 
mainClassName = 'se.ifmo.lab4.Lab4Application'
jar {
    manifest {
        attributes(
            'Main-Class': 'se.ifmo.lab4.Lab4Application'
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}




tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}


//compile = compileJava
//build = build
//clean = clean
//test = test

task music(dependsOn: 'build') {
    doLast {
        if (build.state.executed) {
            println ':)'
            exec {
                commandLine '/usr/bin/paplay', 'sound/mus.wav'
            }
        } else {
            println ':('

        }
    }
}